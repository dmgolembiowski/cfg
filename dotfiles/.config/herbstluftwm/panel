#!/bin/sh

HEIGHT=26
UNDERLINE=2
FONT='IBM Plex Mono:style=regular:size=10'

bg='#fff'
fg='#24292e'
fg_light='#6a737d'
red='#d73a49'
orange='#e36209'
green='#22863a'
blue='#005cc5'

c() {
	herbstclient "$@"
}

fgc() {
	printf -- "%%{F%s}%s%%{F-}" "$1" "$2"
}

title() {
	fgc $fg_light "$1"
}

get_workspaces() {
	local t i w=

	for t in $(c tag_status); do
		i=${t#?}
		case "$t" in
			\#*)
				w="$w $(fgc $red $i) "
				;;
			:*)
				w="$w $i "
				;;
			.*)
				w="$w $(fgc $fg_light $i) "
				;;
		esac
	done

	printf -- 'workspaces %s\n' "$w"
}

workspaces() {
	local hook args

	get_workspaces

	c --idle | while read -r hook args; do
		if [ "$hook" = tag_changed ]; then
			get_workspaces
		fi
	done
}

get_task() {
	local over=$(command task -p | wc -l)
	local today=$(command task -t | wc -l)
	local future=$(command task -f | wc -l)

	printf 'task %s ' $(title TASK)

	if [ "$over" -gt 0 ]; then
		fgc $red "$over "
	fi

	if [ "$today" -gt 0 ]; then
		fgc $blue "$today "
	fi

	if [ "$future" -gt 0 ]; then
		printf '%s ' $future
	fi

	printf '\n'
}


task() {
	get_task
	while inotifywait -e close_write -r ~/src/notes >/dev/null 2>&1; do
		get_task
	done
}

temp_color() {
	local perc=$1
	local c=$fg

	# Critical temp is 128
	[ "$perc" -ge 65 ] && c=$orange
	[ "$perc" -ge 90 ] && c=$red

	printf '%s' $c
}

temp() {
	local p=/sys/class/thermal/thermal_zone0/temp
	local t

	while :; do
		t=$(cat $p)
		printf 'temp %s %s\n' $(title TEMP) \
			$(fgc $(temp_color ${t%???}) ${t%???}Â°)
		sleep 5
	done
}

get_redsh() {
	local temp

	if [ -z "$(pgrep -x redshift)" ]; then
		fgc $red UNKNOWN
		return
	fi

	temp=$(command redshift -l 59.91:10.74 -p 2>/dev/null |
		awk -F: '/^Color temp/ { print $2 }' |
		tr -dc '[:digit:]')

	if [ "$temp" -eq 4500 ]; then
		fgc $blue NIGHT
	else
		fgc $green DAY
	fi
}

redsh() {
	while :; do
		printf 'redsh %s %s\n' $(title RED) $(get_redsh)
		sleep 10
	done
}

get_vol() {
	printf 'vol %s %s\n' $(title VOL) "$(command vol get)"
}

vol() {
	command vol init

	get_vol

	while command vol wait; do
		get_vol
	done
}


wifi_color() {
	local perc=$1
	local c=$green

	# Max quality is 70
	[ "$perc" -lt 52 ] && c=$fg
	[ "$perc" -lt 37 ] && c=$orange
	[ "$perc" -lt 18 ] && c=$red

	printf '%s' $c
}

wifi_quality() {
	awk /$1:' / { gsub(/\./, "", $3); print $3 }' /proc/net/wireless
}

wifi() {
	local iw=/usr/sbin/iw
	[ -e $iw ] || return 0

	local if=$($iw dev | awk '/\t+Interface/ { print $2 }')
	local ssid quality

	while :; do
		ssid=$($iw $if link | awk -F: '/SSID: / { print $2 }')
		[ "$ssid" ] || continue
		quality=$(wifi_quality $if)

		printf -- 'wifi %s %s\n' $(title WIFI) \
			"$(fgc $(wifi_color $quality) "$ssid")"
		sleep 1
	done
}

bat_color() {
	local state=$1
	local perc=$2
	local c=$green

	[ "$perc" -lt 75 ] && c=$fg
	[ "$perc" -lt 50 ] && c=$orange
	[ "$perc" -lt 25 ] && c=$red
	[ "$state" -eq 1 ] && c=$blue

	printf -- '%s' $c
}

bat() {
	local sys=/sys/class/power_supply
	local ac=$sys/AC
	local out bat state now full perc

	[ -d $ac ] || return 0

	while :; do
		state=$(cat $ac/online)

		out=

		for bat in $sys/BAT*; do
			case $bat in
				*\*)
					return 0
					;;
			esac

			now=$(cat $bat/energy_now)
			full=$(cat $bat/energy_full)
			perc=$(expr \( 100 \* $now \) / $full)

			out="$out $(fgc $(bat_color $state $perc) ${perc}%%)"
		done

		printf -- 'bat %s%s\n' $(title BAT) "$out"
		sleep 1
	done
}

time() {
	while :; do
		printf -- "time %%{F$fg_light}%s%%{F-} %s\n" \
			$(date +'%Y-%m-%d %H:%M')
		sleep $((60 - $(date +%S)))
	done
}

parse() {
	local event msg
	local update prev
	local workspaces right task temp redsh vol wifi bat time

	while read -r event msg; do
		update=

		case $event in
			workspaces|task|temp|redsh|vol|wifi|bat|time)
				eval prev=\$$event
				if [ "$prev" != "$msg" ]; then
					eval $event="\$msg"
					update=yes
				fi
				;;
		esac

		if [ "$update" ]; then
			right="$temp  $redsh  $vol  $wifi  $bat  $time"
			printf -- '  %s %%{c} %s %%{r} %s  \n' \
				"$workspaces" "$task" "$right"
		fi
	done
}

cleanup() {
	kill $CHLD 2>/dev/null
	rm -f $FIFO
}

trap 'cleanup' INT TERM EXIT

FIFO=$(mktemp -u)
mkfifo -m600 $FIFO

(workspaces) >$FIFO&
CHLD="$CHLD $!"

(task) >$FIFO&
CHLD="$CHLD $!"

(temp) >$FIFO&
CHLD="$CHLD $!"

(redsh) >$FIFO&
CHLD="$CHLD $!"

(vol) >$FIFO&
CHLD="$CHLD $!"

(wifi) >$FIFO&
CHLD="$CHLD $!"

(bat) >$FIFO&
CHLD="$CHLD $!"

(time) >$FIFO&
CHLD="$CHLD $!"

c pad 0 $(($HEIGHT-6))

cat $FIFO | parse | lemonbar \
  -g x$HEIGHT++ \
  -u $UNDERLINE \
  -f "$FONT" \
  -F $fg \
  -B $bg \
